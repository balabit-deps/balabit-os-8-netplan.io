diff --git a/doc/netplan.md b/doc/netplan.md
index 462da9a..be2de7a 100644
--- a/doc/netplan.md
+++ b/doc/netplan.md
@@ -1087,10 +1087,6 @@ more general information about tunnels.
 
 :   Defines the address of the remote endpoint of the tunnel.
 
-``ttl`` (scalar) â€“ since **0.102**
-
-:   Defines the TTL of the tunnel.
-
 ``key``  (scalar or mapping)
 
 :   Define keys to use for the tunnel. The key can be a number or a dotted
diff --git a/src/networkd.c b/src/networkd.c
index 05a6bf9..34fb5e2 100644
--- a/src/networkd.c
+++ b/src/networkd.c
@@ -142,8 +142,6 @@ write_tunnel_params(GString* s, const NetplanNetDefinition* def)
         g_string_append_printf(params, "Mode=%s\n", tunnel_mode_to_string(def->tunnel.mode));
     g_string_append_printf(params, "Local=%s\n", def->tunnel.local_ip);
     g_string_append_printf(params, "Remote=%s\n", def->tunnel.remote_ip);
-    if (def->tunnel.ttl)
-        g_string_append_printf(params, "TTL=%u\n", def->tunnel.ttl);
     if (def->tunnel.input_key)
         g_string_append_printf(params, "InputKey=%s\n", def->tunnel.input_key);
     if (def->tunnel.output_key)
diff --git a/src/nm.c b/src/nm.c
index 2049c19..06156d0 100644
--- a/src/nm.c
+++ b/src/nm.c
@@ -409,8 +409,6 @@ write_tunnel_params(const NetplanNetDefinition* def, GKeyFile *kf)
     g_key_file_set_integer(kf, "ip-tunnel", "mode", def->tunnel.mode);
     g_key_file_set_string(kf, "ip-tunnel", "local", def->tunnel.local_ip);
     g_key_file_set_string(kf, "ip-tunnel", "remote", def->tunnel.remote_ip);
-    if (def->tunnel.ttl)
-        g_key_file_set_uint64(kf, "ip-tunnel", "ttl", def->tunnel.ttl);
     if (def->tunnel.input_key)
         g_key_file_set_string(kf, "ip-tunnel", "input-key", def->tunnel.input_key);
     if (def->tunnel.output_key)
diff --git a/src/parse.c b/src/parse.c
index dcea8bc..9938fd5 100644
--- a/src/parse.c
+++ b/src/parse.c
@@ -2323,7 +2323,6 @@ static const mapping_entry_handler tunnel_def_handlers[] = {
     {"mode", YAML_SCALAR_NODE, handle_tunnel_mode},
     {"local", YAML_SCALAR_NODE, handle_tunnel_addr, NULL, netdef_offset(tunnel.local_ip)},
     {"remote", YAML_SCALAR_NODE, handle_tunnel_addr, NULL, netdef_offset(tunnel.remote_ip)},
-    {"ttl", YAML_SCALAR_NODE, handle_netdef_guint, NULL, netdef_offset(tunnel.ttl)},
 
     /* Handle key/keys for clarity in config: this can be either a scalar or
      * mapping of multiple keys (input and output)
diff --git a/src/parse.h b/src/parse.h
index 19abf10..0cab071 100644
--- a/src/parse.h
+++ b/src/parse.h
@@ -246,7 +246,6 @@ struct net_definition {
     NetplanDefType type;
     NetplanBackend backend;
     char* id;
-    char* filename;
     /* only necessary for NetworkManager connection UUIDs in some cases */
     uuid_t uuid;
 
@@ -376,7 +375,6 @@ struct net_definition {
         char *private_key; /* used for wireguard */
         guint fwmark;
         guint port;
-        guint ttl;
     } tunnel;
 
     NetplanAuthenticationSettings auth;
@@ -393,6 +391,8 @@ struct net_definition {
     NetplanOVSSettings ovs_settings;
 
     NetplanBackendSettings backend_settings;
+
+    char* filename;
 };
 
 typedef enum {
diff --git a/src/validation.c b/src/validation.c
index 5cdfb15..1c5de4a 100644
--- a/src/validation.c
+++ b/src/validation.c
@@ -205,8 +205,6 @@ validate_tunnel_grammar(NetplanNetDefinition* nd, yaml_node_t* node, GError** er
         return yaml_error(node, error, "%s: missing 'local' property for tunnel", nd->id);
     if (!nd->tunnel.remote_ip)
         return yaml_error(node, error, "%s: missing 'remote' property for tunnel", nd->id);
-    if (nd->tunnel.ttl && nd->tunnel.ttl > 255)
-        return yaml_error(node, error, "%s: 'ttl' property for tunnel must be in range [1...255]", nd->id);
 
     switch(nd->tunnel.mode) {
         case NETPLAN_TUNNEL_MODE_IPIP6:
diff --git a/tests/generator/test_tunnels.py b/tests/generator/test_tunnels.py
index 534c2ba..5f82c90 100644
--- a/tests/generator/test_tunnels.py
+++ b/tests/generator/test_tunnels.py
@@ -19,7 +19,7 @@
 from .base import TestBase, ND_WITHIPGW, ND_EMPTY, NM_WG, ND_WG
 
 
-def prepare_config_for_mode(renderer, mode, key=None, ttl=None):
+def prepare_config_for_mode(renderer, mode, key=None):
     config = """network:
   version: 2
   renderer: {}
@@ -36,16 +36,15 @@ def prepare_config_for_mode(renderer, mode, key=None, ttl=None):
         local_ip = "10.10.10.10"
         remote_ip = "20.20.20.20"
 
-    append_ttl = '\n      ttl: {}'.format(ttl) if ttl else ''
     config += """
   tunnels:
     tun0:
       mode: {}
       local: {}
-      remote: {}{}
+      remote: {}
       addresses: [ 15.15.15.15/24 ]
       gateway4: 20.20.20.21
-""".format(mode, local_ip, remote_ip, append_ttl)
+""".format(mode, local_ip, remote_ip)
 
     # Handle key/keys as str or dict as required by the test
     if type(key) is str:
@@ -745,7 +744,7 @@ ConfigureWithoutCarrier=yes
 
     def test_ipip(self):
         """[networkd] Validate generation of IPIP tunnels"""
-        config = prepare_config_for_mode('networkd', 'ipip', ttl=64)
+        config = prepare_config_for_mode('networkd', 'ipip')
         self.generate(config)
         self.assert_networkd({'tun0.netdev': '''[NetDev]
 Name=tun0
@@ -755,7 +754,6 @@ Kind=ipip
 Independent=true
 Local=10.10.10.10
 Remote=20.20.20.20
-TTL=64
 ''',
                               'tun0.network': '''[Match]
 Name=tun0
@@ -1068,7 +1066,7 @@ method=ignore
 
     def test_ipip(self):
         """[NetworkManager] Validate generation of IPIP tunnels"""
-        config = prepare_config_for_mode('NetworkManager', 'ipip', ttl=64)
+        config = prepare_config_for_mode('NetworkManager', 'ipip')
         self.generate(config)
         self.assert_nm({'tun0': '''[connection]
 id=netplan-tun0
@@ -1079,7 +1077,6 @@ interface-name=tun0
 mode=1
 local=10.10.10.10
 remote=20.20.20.20
-ttl=64
 
 [ipv4]
 method=manual
@@ -1263,20 +1260,6 @@ class TestConfigErrors(TestBase):
         out = self.generate(config, expect_fail=True)
         self.assertIn("Error in network definition: tun0: missing 'remote' property for tunnel", out)
 
-    def test_invalid_ttl(self):
-        """Fail if TTL not in range [1...255]"""
-        config = '''network:
-  version: 2
-  tunnels:
-    tun0:
-      mode: ipip
-      local: 20.20.20.20
-      remote: 10.10.10.10
-      ttl: 300
-'''
-        out = self.generate(config, expect_fail=True)
-        self.assertIn("Error in network definition: tun0: 'ttl' property for tunnel must be in range [1...255]", out)
-
     def test_wrong_local_ip_for_mode_v4(self):
         """Show an error when an IPv6 local addr is used for an IPv4 tunnel mode"""
         config = '''network:
diff --git a/tests/integration/tunnels.py b/tests/integration/tunnels.py
index ab5d55e..8a2a635 100644
--- a/tests/integration/tunnels.py
+++ b/tests/integration/tunnels.py
@@ -67,7 +67,6 @@ class _CommonTests():
       mode: ipip
       local: 192.168.5.1
       remote: 99.99.99.99
-      ttl: 64
 ''' % {'r': self.backend, 'ec': self.dev_e_client, 'e2c': self.dev_e2_client})
         self.generate_and_settle()
         self.assert_iface('tun0', ['tun0@NONE', 'link.* 192.168.5.1 peer 99.99.99.99'])
