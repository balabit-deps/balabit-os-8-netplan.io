From: Danilo Egea Gondolfo <danilogondolfo@gmail.com>
Date: Mon, 27 May 2024 13:19:10 +0100
Subject: libnetplan: use more restrictive file permissions

When generating backend and systemd files, use more restrictive
permissions:

networkd related files will be owned by root:systemd-network and have
mode 0640.

service unit files will be owned by root:root and have mode 0640.

wpa_supplicant and Network Manager files will continue with the existing
permissions.

Autopkgtests will check if the permissions are set as expected when
calling the generator.

Addresses a credentials leakage: CVE-2022-4968

Bug-Ubuntu: https://bugs.launchpad.net/netplan/+bug/1987842
---
 src/networkd.c                | 12 ++++---
 src/openvswitch.c             |  4 +++
 src/sriov.c                   |  3 ++
 src/util-internal.h           |  3 ++
 src/util.c                    | 41 ++++++++++++++++++++-
 tests/generator/test_auth.py  |  2 +-
 tests/generator/test_wifis.py |  2 +-
 tests/integration/base.py     | 84 +++++++++++++++++++++++++++++++++++++++++++
 8 files changed, 143 insertions(+), 8 deletions(-)

diff --git a/src/networkd.c b/src/networkd.c
index 62c87ce..1480536 100644
--- a/src/networkd.c
+++ b/src/networkd.c
@@ -293,7 +293,7 @@ write_link_file(const NetplanNetDefinition* def, const char* rootdir, const char
         g_string_append_printf(s, "LargeReceiveOffload=%s\n",
         (def->large_receive_offload ? "true" : "false"));
 
-    orig_umask = umask(022);
+    orig_umask = umask(027);
     g_string_free_to_file(s, rootdir, path, ".link");
     umask(orig_umask);
 }
@@ -463,8 +463,9 @@ write_netdev_file(const NetplanNetDefinition* def, const char* rootdir, const ch
 
     /* these do not contain secrets and need to be readable by
      * systemd-networkd - LP: #1736965 */
-    orig_umask = umask(022);
+    orig_umask = umask(027);
     g_string_free_to_file(s, rootdir, path, ".netdev");
+    _netplan_set_file_owners(rootdir, path, ".netdev", "root", "systemd-network");
     umask(orig_umask);
 }
 
@@ -836,8 +837,9 @@ netplan_netdef_write_network_file(
 
         /* these do not contain secrets and need to be readable by
          * systemd-networkd - LP: #1736965 */
-        orig_umask = umask(022);
+        orig_umask = umask(027);
         g_string_free_to_file(s, rootdir, path, ".network");
+        _netplan_set_file_owners(rootdir, path, ".network", "root", "systemd-network");
         umask(orig_umask);
     }
 
@@ -884,7 +886,7 @@ write_rules_file(const NetplanNetDefinition* def, const char* rootdir)
 
     g_string_append_printf(s, "NAME=\"%s\"\n", def->set_name);
 
-    orig_umask = umask(022);
+    orig_umask = umask(027);
     g_string_free_to_file(s, rootdir, path, NULL);
     umask(orig_umask);
 }
@@ -1007,7 +1009,7 @@ write_wpa_unit(const NetplanNetDefinition* def, const char* rootdir)
     } else {
         g_string_append(s, " -Dnl80211,wext\n");
     }
-    orig_umask = umask(022);
+    orig_umask = umask(027);
     g_string_free_to_file(s, rootdir, path, NULL);
     umask(orig_umask);
 }
diff --git a/src/openvswitch.c b/src/openvswitch.c
index 7479267..3292dbf 100644
--- a/src/openvswitch.c
+++ b/src/openvswitch.c
@@ -18,6 +18,7 @@
 
 #include <unistd.h>
 #include <errno.h>
+#include <sys/stat.h>
 
 #include <glib.h>
 #include <glib/gprintf.h>
@@ -35,6 +36,7 @@ write_ovs_systemd_unit(const char* id, const GString* cmds, const char* rootdir,
     g_autofree gchar* id_escaped = NULL;
     g_autofree char* link = g_strjoin(NULL, rootdir ?: "", "/run/systemd/system/systemd-networkd.service.wants/netplan-ovs-", id, ".service", NULL);
     g_autofree char* path = g_strjoin(NULL, "/run/systemd/system/netplan-ovs-", id, ".service", NULL);
+    mode_t orig_umask;
 
     GString* s = g_string_new("[Unit]\n");
     g_string_append_printf(s, "Description=OpenVSwitch configuration for %s\n", id);
@@ -62,7 +64,9 @@ write_ovs_systemd_unit(const char* id, const GString* cmds, const char* rootdir,
     g_string_append(s, "\n[Service]\nType=oneshot\n");
     g_string_append(s, cmds->str);
 
+    orig_umask = umask(027);
     g_string_free_to_file(s, rootdir, path, NULL);
+    umask(orig_umask);
 
     safe_mkdir_p_dir(link);
     if (symlink(path, link) < 0 && errno != EEXIST) {
diff --git a/src/sriov.c b/src/sriov.c
index 966718f..03a4e73 100644
--- a/src/sriov.c
+++ b/src/sriov.c
@@ -33,6 +33,7 @@ write_sriov_rebind_systemd_unit(const GString* pfs, const char* rootdir, GError*
     g_autofree char* link = g_strjoin(NULL, rootdir ?: "", "/run/systemd/system/multi-user.target.wants/netplan-sriov-rebind.service", NULL);
     g_autofree char* path = g_strjoin(NULL, "/run/systemd/system/netplan-sriov-rebind.service", NULL);
     gchar** split = NULL;
+    mode_t orig_umask;
 
     GString* s = g_string_new("[Unit]\n");
     g_string_append(s, "Description=(Re-)bind SR-IOV Virtual Functions to their driver\n");
@@ -48,7 +49,9 @@ write_sriov_rebind_systemd_unit(const GString* pfs, const char* rootdir, GError*
     g_string_append(s, "\n[Service]\nType=oneshot\n");
     g_string_append_printf(s, "ExecStart=" SBINDIR "/netplan rebind %s\n", pfs->str);
 
+    orig_umask = umask(027);
     g_string_free_to_file(s, rootdir, path, NULL);
+    umask(orig_umask);
 
     safe_mkdir_p_dir(link);
     if (symlink(path, link) < 0 && errno != EEXIST) {
diff --git a/src/util-internal.h b/src/util-internal.h
index d787553..3b83ece 100644
--- a/src/util-internal.h
+++ b/src/util-internal.h
@@ -88,3 +88,6 @@ process_yaml_hierarchy(const char* rootdir);
 
 gboolean
 has_openvswitch(const NetplanOVSSettings* ovs, NetplanBackend backend, GHashTable *ovs_ports);
+
+gboolean
+_netplan_set_file_owners(const char* rootdir, const char* path, const char* suffix, const char* owner, const char* group);
diff --git a/src/util.c b/src/util.c
index 841ec12..74d4791 100644
--- a/src/util.c
+++ b/src/util.c
@@ -19,6 +19,10 @@
 #include <unistd.h>
 #include <arpa/inet.h>
 #include <errno.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <pwd.h>
+#include <grp.h>
 
 #include <glib.h>
 #include <glib/gprintf.h>
@@ -45,11 +49,12 @@ void
 safe_mkdir_p_dir(const char* file_path)
 {
     g_autofree char* dir = g_path_get_dirname(file_path);
-
+    mode_t orig_umask = umask(022);
     if (g_mkdir_with_parents(dir, 0755) < 0) {
         g_fprintf(stderr, "ERROR: cannot create directory %s: %m\n", dir);
         exit(1);
     }
+    umask(orig_umask);
 }
 
 /**
@@ -600,3 +605,37 @@ mark_data_as_dirty(NetplanParser* npp, void* data_ptr)
         npp->current.netdef->_private->dirty_fields = g_hash_table_new(g_direct_hash, g_direct_equal);
     g_hash_table_insert(npp->current.netdef->_private->dirty_fields, data_ptr, data_ptr);
 }
+
+gboolean
+_netplan_set_file_owners(const char* rootdir, const char* path, const char* suffix, const char* owner, const char* group)
+{
+    g_autofree char* full_path = NULL;
+    g_autofree char* path_suffix = NULL;
+    struct passwd* pw = NULL;
+    struct group* gr = NULL;
+    int ret = 0;
+
+    path_suffix = g_strjoin(NULL, path, suffix, NULL);
+    full_path = g_build_path(G_DIR_SEPARATOR_S, rootdir ?: G_DIR_SEPARATOR_S, path_suffix, NULL);
+
+    /* Here we take the owner and group names and look up for their IDs in the passwd and group files.
+     * It's OK to fail to set the owners and mode as this code will be called from unit tests.
+     * The autopkgtests will check if the owner/group and mode are correctly set.
+     */
+    pw = getpwnam(owner);
+    if (!pw) {
+        g_debug("Failed to determine the UID of user %s: %s", owner, strerror(errno)); // LCOV_EXCL_LINE
+    }
+    gr = getgrnam(group);
+    if (!gr) {
+        g_debug("Failed to determine the GID of group %s: %s", group, strerror(errno)); // LCOV_EXCL_LINE
+    }
+    if (pw && gr) {
+        ret = chown(full_path, pw->pw_uid, gr->gr_gid);
+        if (ret != 0) {
+            g_debug("Failed to set owner and group for file %s: %s", full_path, strerror(errno));
+        }
+    }
+
+    return TRUE;
+}
diff --git a/tests/generator/test_auth.py b/tests/generator/test_auth.py
index 3d20109..9bbc0b1 100644
--- a/tests/generator/test_auth.py
+++ b/tests/generator/test_auth.py
@@ -228,7 +228,7 @@ network={
 
         with open(os.path.join(self.workdir.name, 'run/systemd/system/netplan-wpa-eth0.service')) as f:
             self.assertEqual(f.read(), SD_WPA % {'iface': 'eth0', 'drivers': 'wired'})
-            self.assertEqual(stat.S_IMODE(os.fstat(f.fileno()).st_mode), 0o644)
+            self.assertEqual(stat.S_IMODE(os.fstat(f.fileno()).st_mode), 0o640)
         self.assertTrue(os.path.islink(os.path.join(
             self.workdir.name, 'run/systemd/system/systemd-networkd.service.wants/netplan-wpa-eth0.service')))
 
diff --git a/tests/generator/test_wifis.py b/tests/generator/test_wifis.py
index 1a4ead2..0130a6e 100644
--- a/tests/generator/test_wifis.py
+++ b/tests/generator/test_wifis.py
@@ -136,7 +136,7 @@ network={
             self.workdir.name, 'run/systemd/system/netplan-wpa-wl0.service')))
         with open(os.path.join(self.workdir.name, 'run/systemd/system/netplan-wpa-wl0.service')) as f:
             self.assertEqual(f.read(), SD_WPA % {'iface': 'wl0', 'drivers': 'nl80211,wext'})
-            self.assertEqual(stat.S_IMODE(os.fstat(f.fileno()).st_mode), 0o644)
+            self.assertEqual(stat.S_IMODE(os.fstat(f.fileno()).st_mode), 0o640)
         self.assertTrue(os.path.islink(os.path.join(
             self.workdir.name, 'run/systemd/system/systemd-networkd.service.wants/netplan-wpa-wl0.service')))
 
diff --git a/tests/integration/base.py b/tests/integration/base.py
index 10094dd..4816af4 100644
--- a/tests/integration/base.py
+++ b/tests/integration/base.py
@@ -31,6 +31,8 @@ import unittest
 import shutil
 import gi
 import glob
+import pwd
+import grp
 
 # make sure we point to libnetplan properly.
 os.environ.update({'LD_LIBRARY_PATH': '.:{}'.format(os.environ.get('LD_LIBRARY_PATH'))})
@@ -320,6 +322,88 @@ class IntegrationTestsBase(unittest.TestCase):
             if state:
                 self.wait_output(['ip', 'addr', 'show', iface], state, 30)
 
+        self.assert_file_permissions()
+
+    def assert_file_permissions(self):
+        """ Check if the generated files have the expected permissions """
+
+        nd_expected_mode = 0o100640
+        nd_expected_owner = 'root'
+        nd_expected_group = 'systemd-network'
+
+        sd_expected_mode = 0o100640
+        sd_expected_owner = 'root'
+        sd_expected_group = 'root'
+
+        udev_expected_mode = 0o100640
+        udev_expected_owner = 'root'
+        udev_expected_group = 'root'
+
+        nm_expected_mode = 0o100600
+        nm_expected_owner = 'root'
+        nm_expected_group = 'root'
+
+        wpa_expected_mode = 0o100600
+        wpa_expected_owner = 'root'
+        wpa_expected_group = 'root'
+
+        # Check systemd-networkd files
+        base_path = '/run/systemd/network'
+        files = glob.glob(f'{base_path}/*.network') + glob.glob(f'{base_path}/*.netdev')
+        for file in files:
+            res = os.stat(file)
+            user = pwd.getpwuid(res.st_uid)
+            group = grp.getgrgid(res.st_gid)
+            self.assertEqual(res.st_mode, nd_expected_mode, f'file {file}')
+            self.assertEqual(user.pw_name, nd_expected_owner, f'file {file}')
+            self.assertEqual(group.gr_name, nd_expected_group, f'file {file}')
+
+        # Check Network Manager files
+        base_path = '/run/NetworkManager/system-connections'
+        files = glob.glob(f'{base_path}/*.nmconnection')
+        for file in files:
+            res = os.stat(file)
+            user = pwd.getpwuid(res.st_uid)
+            group = grp.getgrgid(res.st_gid)
+            self.assertEqual(res.st_mode, nm_expected_mode, f'file {file}')
+            self.assertEqual(user.pw_name, nm_expected_owner, f'file {file}')
+            self.assertEqual(group.gr_name, nm_expected_group, f'file {file}')
+
+        # Check wpa_supplicant configuration files
+        base_path = '/run/netplan'
+        files = glob.glob(f'{base_path}/wpa-*.conf')
+        for file in files:
+            res = os.stat(file)
+            user = pwd.getpwuid(res.st_uid)
+            group = grp.getgrgid(res.st_gid)
+            self.assertEqual(res.st_mode, wpa_expected_mode, f'file {file}')
+            self.assertEqual(user.pw_name, wpa_expected_owner, f'file {file}')
+            self.assertEqual(group.gr_name, wpa_expected_group, f'file {file}')
+
+        # Check systemd service unit files
+        base_path = '/run/systemd/system/'
+        files = glob.glob(f'{base_path}/netplan-*.service')
+        files += glob.glob(f'{base_path}/systemd-networkd-wait-online.service.d/*.conf')
+        for file in files:
+            res = os.stat(file)
+            user = pwd.getpwuid(res.st_uid)
+            group = grp.getgrgid(res.st_gid)
+            self.assertEqual(res.st_mode, sd_expected_mode, f'file {file}')
+            self.assertEqual(user.pw_name, sd_expected_owner, f'file {file}')
+            self.assertEqual(group.gr_name, sd_expected_group, f'file {file}')
+
+        # Check systemd-udevd files
+        udev_path = '/run/udev/rules.d'
+        link_path = '/run/systemd/network'
+        files = glob.glob(f'{udev_path}/*-netplan*.rules') + glob.glob(f'{link_path}/*.link')
+        for file in files:
+            res = os.stat(file)
+            user = pwd.getpwuid(res.st_uid)
+            group = grp.getgrgid(res.st_gid)
+            self.assertEqual(res.st_mode, udev_expected_mode, f'file {file}')
+            self.assertEqual(user.pw_name, udev_expected_owner, f'file {file}')
+            self.assertEqual(group.gr_name, udev_expected_group, f'file {file}')
+
     def state(self, iface, state):
         '''Tell generate_and_settle() to wait for a specific state'''
         return iface + '/' + state
