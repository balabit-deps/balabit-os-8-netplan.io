From: =?utf-8?q?Lukas_M=C3=A4rdian?= <slyon@ubuntu.com>
Date: Mon, 29 Nov 2021 15:26:02 +0100
Subject: get/set: ignore empty YAML hints and delete files on "set
 network=null" (LP: #1946957) (#246)

This PR contains several improvements wrt. the handling of YAML hint files, as used by the netplan set CLI.

If a --origin-hint is specified, that already exists as an empty file, that file is ignored.
If netplan set network=null [--origin-hint FILE] is executed, a special handler makes sure that either the specified origin hint file is remove, or all files in etc/netplan/*.yaml are cleared otherwise.

COMMITS:
* test:get-set: detect unexpected output in CLI
* cli:set: ignore empty hint files
* cli:set: special case for 'network=null' to clear YAML files
* cli:set: improve logging
* cli:set: do not crash if we try to unset something that does not exist (LP: #1946957)
* cli:set: fix another case of writing an empty origin-hint file (containing whitespace)
---
 netplan/cli/commands/set.py | 41 ++++++++++++++++++++++++------
 tests/test_cli_get_set.py   | 61 +++++++++++++++++++++++++++++++++++++--------
 2 files changed, 85 insertions(+), 17 deletions(-)

diff --git a/netplan/cli/commands/set.py b/netplan/cli/commands/set.py
index 2d75cac..d3c43ee 100644
--- a/netplan/cli/commands/set.py
+++ b/netplan/cli/commands/set.py
@@ -23,6 +23,7 @@ import tempfile
 import re
 import logging
 import shutil
+import glob
 
 import netplan.cli.utils as utils
 from netplan.configmanager import ConfigManager
@@ -52,6 +53,11 @@ class NetplanSet(utils.NetplanCommand):
         self.parse_args()
         self.run_command()
 
+    def is_emtpy_yaml(self, tree):
+        if isinstance(tree, dict) and list(tree.keys()) == ['network'] and tree['network'] is None:
+            return True
+        return False
+
     def split_tree_by_hint(self, set_tree) -> (str, dict):
         network = set_tree.get('network', {})
         # A mapping of 'origin-hint' -> YAML tree (one subtree per netdef)
@@ -97,6 +103,19 @@ class NetplanSet(utils.NetplanCommand):
         key, value = split
         set_tree = self.parse_key(key, yaml.safe_load(value))
 
+        # special case: clear all YAML (or a specific hint file) if "network=null" is set
+        if self.is_emtpy_yaml(set_tree):
+            path = os.path.join('etc', 'netplan')
+            if self.origin_hint:  # clear specific hint file, it it does exist
+                hint_path = os.path.join(self.root_dir, path, self.origin_hint + '.yaml')
+                if os.path.isfile(hint_path):
+                    os.remove(hint_path)
+            else:  # clear all YAML files in <ROOT_DIR>/etc/netplan/*.yaml
+                yaml_files = glob.glob(os.path.join(self.root_dir, path, '*.yaml'))
+                for f in yaml_files:
+                    os.remove(f)
+            return
+
         hints = [(self.origin_hint, set_tree)]
         # Override YAML config in each individual netdef file if origin-hint is not set
         if self.origin_hint is None:
@@ -149,16 +168,21 @@ class NetplanSet(utils.NetplanCommand):
 
         config = {'network': {}}
         absp = os.path.join(rootdir, path, name)
-        if os.path.isfile(absp):
+        # check stat(absp), as we don't care about empty hint files
+        if os.path.isfile(absp) and os.stat(absp).st_size > 0:
             with open(absp, 'r') as f:
-                config = yaml.safe_load(f)
+                c = yaml.safe_load(f)
+                if c is not None:  # ignore empty file, even if it contains whitespace
+                    config = c
 
         new_tree = self.merge(config, set_tree)
         stripped = ConfigManager.strip_tree(new_tree)
         logging.debug('Writing file {}: {}'.format(name, stripped))
         if 'network' in stripped and list(stripped['network'].keys()) == ['version']:
             # Clear file if only 'network: {version: 2}' is left
-            os.remove(absp)
+            logging.debug('Empty YAML, deleting file {}'.format(absp))
+            if os.path.isfile(absp):
+                os.remove(absp)
         elif 'network' in stripped:
             tmpp = os.path.join(tmproot.name, path, name)
             with open(tmpp, 'w+') as f:
@@ -169,8 +193,11 @@ class NetplanSet(utils.NetplanCommand):
             # Valid, move it to final destination
             shutil.copy2(tmpp, absp)
             os.remove(tmpp)
-        elif os.path.isfile(absp):
-            # Clear file if the last/only key got removed
-            os.remove(absp)
-        else:
+        elif stripped == {}:
+            # Clear file (if it exists) if the last/only key got removed
+            # do nothing otherwise
+            logging.debug('Removed last key from YAML, deleting file {}'.format(absp))
+            if os.path.isfile(absp):
+                os.remove(absp)
+        else:  # pragma nocover
             raise Exception('Invalid input: {}'.format(set_tree))
diff --git a/tests/test_cli_get_set.py b/tests/test_cli_get_set.py
index b5206e7..a5364b2 100644
--- a/tests/test_cli_get_set.py
+++ b/tests/test_cli_get_set.py
@@ -23,6 +23,7 @@ import unittest
 import tempfile
 import io
 import shutil
+import glob
 
 from contextlib import redirect_stdout
 from netplan.cli.core import Netplan
@@ -53,7 +54,8 @@ class TestSet(unittest.TestCase):
 
     def _set(self, args):
         args.insert(0, 'set')
-        return _call_cli(args + ['--root-dir', self.workdir.name])
+        out = _call_cli(args + ['--root-dir', self.workdir.name])
+        self.assertEqual(out, '', msg='netplan set returned unexpected output')
 
     def test_set_scalar(self):
         self._set(['ethernets.eth0.dhcp4=true'])
@@ -112,6 +114,53 @@ class TestSet(unittest.TestCase):
             self._set(['ethernets.eth0.dhcp4=true', '--origin-hint='])
         self.assertTrue('Invalid/empty origin-hint' in str(context.exception))
 
+    def test_set_empty_hint_file(self):
+        empty_file = os.path.join(self.workdir.name, 'etc', 'netplan', '00-empty.yaml')
+        open(empty_file, 'w').close()  # touch 00-empty.yaml
+        self._set(['ethernets.eth0.dhcp4=true', '--origin-hint=00-empty'])
+        self.assertTrue(os.path.isfile(empty_file))
+        with open(empty_file, 'r') as f:
+            self.assertIn('network:\n  ethernets:\n    eth0:\n      dhcp4: true', f.read())
+
+    def test_set_empty_hint_file_whitespace(self):
+        empty_file = os.path.join(self.workdir.name, 'etc', 'netplan', '00-empty.yaml')
+        with open(empty_file, 'w') as f:
+            f.write('\n')  # echo "" > 00-empty.yaml
+        self._set(['ethernets.eth0=null', '--origin-hint=00-empty'])
+        self.assertFalse(os.path.isfile(empty_file))
+
+    def test_set_network_null_hint(self):
+        not_a_file = os.path.join(self.workdir.name, 'etc', 'netplan', '00-no-exist.yaml')
+        self._set(['network=null', '--origin-hint=00-no-exist'])
+        self.assertFalse(os.path.isfile(not_a_file))
+
+    def test_unset_non_existing_hint(self):
+        not_a_file = os.path.join(self.workdir.name, 'etc', 'netplan', '00-no-exist.yaml')
+        self._set(['network.ethernets=null', '--origin-hint=00-no-exist'])
+        self.assertFalse(os.path.isfile(not_a_file))
+
+    def test_set_network_null_hint_rm(self):
+        some_hint = os.path.join(self.workdir.name, 'etc', 'netplan', '00-some-hint.yaml')
+        with open(some_hint, 'w') as f:
+            f.write('network: {ethernets: {eth0: {dhcp4: true}}}')
+        with open(self.path, 'w') as f:
+            f.write('network: {version: 2}')
+        self._set(['network=null', '--origin-hint=00-some-hint'])
+        self.assertFalse(os.path.isfile(some_hint))  # the hint file is deleted
+        self.assertTrue(os.path.isfile(self.path))   # any other YAML still exists
+
+    def test_set_network_null_global(self):
+        some_hint = os.path.join(self.workdir.name, 'etc', 'netplan', '00-some-hint.yaml')
+        with open(some_hint, 'w') as f:
+            f.write('network: {ethernets: {eth0: {dhcp4: true}}}')
+        with open(self.path, 'w') as f:
+            f.write('network: {version: 2}')
+        self._set(['network=null'])
+        any_yaml = glob.glob(os.path.join(self.workdir.name, 'etc', 'netplan', '*.yaml'))
+        self.assertEqual(any_yaml, [])
+        self.assertFalse(os.path.isfile(self.path))
+        self.assertFalse(os.path.isfile(some_hint))
+
     def test_set_invalid(self):
         with self.assertRaises(Exception) as context:
             self._set(['xxx.yyy=abc'])
@@ -222,8 +271,7 @@ class TestSet(unittest.TestCase):
   version: 2
   ethernets:
     ens3: {dhcp4: yes}''')
-        out = self._set(['network.ethernets.ens3=NULL'])
-        print(out, flush=True)
+        self._set(['network.ethernets.ens3=NULL'])
         # The file should be deleted if only "network: {version: 2}" is left
         self.assertFalse(os.path.isfile(self.path))
 
@@ -242,13 +290,6 @@ class TestSet(unittest.TestCase):
         with open(self.path, 'r') as f:
             self.assertIn('network:\n  ethernets:\n    eth0.123:\n      dhcp4: false', f.read())
 
-    def test_set_invalid_input(self):
-        with self.assertRaises(Exception) as context:
-            self._set([r'ethernets.eth0={dhcp4:false}'])
-        self.assertEquals(
-                'Invalid input: {\'network\': {\'ethernets\': {\'eth0\': {\'dhcp4:false\': None}}}}',
-                str(context.exception))
-
     def test_set_override_existing_file(self):
         override = os.path.join(self.workdir.name, 'etc', 'netplan', 'some-file.yaml')
         with open(override, 'w') as f:
