From: =?utf-8?q?Lukas_M=C3=A4rdian?= <lukas.maerdian@canonical.com>
Date: Thu, 25 Mar 2021 10:08:37 +0100
Subject: tests:tunnels: improve flaky wireguard test with wait_output()

---
 tests/integration/base.py    | 16 ++++++++++------
 tests/integration/tunnels.py |  4 +++-
 2 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/tests/integration/base.py b/tests/integration/base.py
index c7df302..396a1b3 100644
--- a/tests/integration/base.py
+++ b/tests/integration/base.py
@@ -333,17 +333,21 @@ class IntegrationTestsBase(unittest.TestCase):
         else:
             self.fail('timed out waiting for %s to get ready by NM' % iface)
 
-    def nm_wait_connected(self, iface, timeout):
-        for t in range(timeout):
+    def wait_output(self, cmd, expected_output, timeout=10):
+        for _ in range(timeout):
             try:
-                out = subprocess.check_output(['nmcli', 'dev', 'show', iface])
+                out = subprocess.check_output(cmd, universal_newlines=True)
             except subprocess.CalledProcessError:
-                out = b''
-            if b'(connected' in out:
+                out = ''
+            if expected_output in out:
                 break
+            sys.stdout.write('. ')  # waiting indicator
             time.sleep(1)
         else:
-            self.fail('timed out waiting for %s to get connected by NM:\n%s' % (iface, out.decode()))
+            self.fail('timed out waiting for "{}" to appear in {}'.format(expected_output, cmd))
+
+    def nm_wait_connected(self, iface, timeout):
+        self.wait_output(['nmcli', 'dev', 'show', iface], '(connected', timeout)
 
     @classmethod
     def is_active(klass, unit):
diff --git a/tests/integration/tunnels.py b/tests/integration/tunnels.py
index 071479d..ab5d55e 100644
--- a/tests/integration/tunnels.py
+++ b/tests/integration/tunnels.py
@@ -112,7 +112,9 @@ class _CommonTests():
           keepalive: 21
 ''' % {'r': self.backend, 'ec': self.dev_e_client, 'e2c': self.dev_e2_client})
         self.generate_and_settle()
-        time.sleep(2)  # Give some time for handshake/connection between client & server
+        # Wait for handshake/connection between client & server
+        self.wait_output(['wg', 'show', 'wg0'], 'latest handshake')
+        self.wait_output(['wg', 'show', 'wg1'], 'latest handshake')
         # Verify server
         out = subprocess.check_output(['wg', 'show', 'wg0', 'private-key'], universal_newlines=True)
         self.assertIn("4GgaQCy68nzNsUE5aJ9fuLzHhB65tAlwbmA72MWnOm8=", out)
