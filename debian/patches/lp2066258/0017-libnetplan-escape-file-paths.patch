From: Danilo Egea Gondolfo <danilogondolfo@gmail.com>
Date: Thu, 30 May 2024 12:13:34 +0100
Subject: libnetplan: escape file paths

Escape strings used to build paths with g_uri_escape_string().
systemd_escape() could also be used but it has the downside of calling
an external program and, by default, it escapes dashes (which are
present in files generated from Network Manager for example).
---
 src/networkd.c                 | 13 ++++++++-----
 src/nm.c                       |  5 +++--
 src/openvswitch.c              |  8 +++++---
 tests/generator/test_common.py | 41 +++++++++++++++++++++++++++++++++++++++++
 4 files changed, 57 insertions(+), 10 deletions(-)

diff --git a/src/networkd.c b/src/networkd.c
index aa329b3..48d2e7b 100644
--- a/src/networkd.c
+++ b/src/networkd.c
@@ -851,7 +851,8 @@ static void
 write_rules_file(const NetplanNetDefinition* def, const char* rootdir)
 {
     GString* s = NULL;
-    g_autofree char* path = g_strjoin(NULL, "run/udev/rules.d/99-netplan-", def->id, ".rules", NULL);
+    g_autofree char* escaped_netdef_id = g_uri_escape_string(def->id, NULL, TRUE);
+    g_autofree char* path = g_strjoin(NULL, "run/udev/rules.d/99-netplan-", escaped_netdef_id, ".rules", NULL);
     mode_t orig_umask;
 
     /* do we need to write a .rules file?
@@ -1027,7 +1028,8 @@ write_wpa_conf(const NetplanNetDefinition* def, const char* rootdir, GError** er
 {
     GHashTableIter iter;
     GString* s = g_string_new("ctrl_interface=/run/wpa_supplicant\n\n");
-    g_autofree char* path = g_strjoin(NULL, "run/netplan/wpa-", def->id, ".conf", NULL);
+    g_autofree char* escaped_netdef_id = g_uri_escape_string(def->id, NULL, TRUE);
+    g_autofree char* path = g_strjoin(NULL, "run/netplan/wpa-", escaped_netdef_id, ".conf", NULL);
     mode_t orig_umask;
 
     g_debug("%s: Creating wpa_supplicant configuration file %s", def->id, path);
@@ -1127,7 +1129,8 @@ netplan_netdef_write_networkd(
         gboolean* has_been_written,
         GError** error)
 {
-    g_autofree char* path_base = g_strjoin(NULL, "run/systemd/network/10-netplan-", def->id, NULL);
+    g_autofree char* escaped_netdef_id = g_uri_escape_string(def->id, NULL, TRUE);
+    g_autofree char* path_base = g_strjoin(NULL, "run/systemd/network/10-netplan-", escaped_netdef_id, NULL);
     SET_OPT_OUT_PTR(has_been_written, FALSE);
 
     /* We want this for all backends when renaming, as *.link and *.rules files are
@@ -1146,8 +1149,8 @@ netplan_netdef_write_networkd(
     }
 
     if (def->type == NETPLAN_DEF_TYPE_WIFI || def->has_auth) {
-        g_autofree char* link = g_strjoin(NULL, rootdir ?: "", "/run/systemd/system/systemd-networkd.service.wants/netplan-wpa-", def->id, ".service", NULL);
-        g_autofree char* slink = g_strjoin(NULL, "/run/systemd/system/netplan-wpa-", def->id, ".service", NULL);
+        g_autofree char* link = g_strjoin(NULL, rootdir ?: "", "/run/systemd/system/systemd-networkd.service.wants/netplan-wpa-", escaped_netdef_id, ".service", NULL);
+        g_autofree char* slink = g_strjoin(NULL, "/run/systemd/system/netplan-wpa-", escaped_netdef_id, ".service", NULL);
         if (def->type == NETPLAN_DEF_TYPE_WIFI && def->has_match) {
             g_set_error(error, G_MARKUP_ERROR, G_MARKUP_ERROR_INVALID_CONTENT, "ERROR: %s: networkd backend does not support wifi with match:, only by interface name\n", def->id);
             return FALSE;
diff --git a/src/nm.c b/src/nm.c
index b612caa..0363dd5 100644
--- a/src/nm.c
+++ b/src/nm.c
@@ -868,9 +868,10 @@ write_nm_conf_access_point(const NetplanNetDefinition* def, const char* rootdir,
         g_datalist_foreach((GData**)&def->backend_settings.nm.passthrough, write_fallback_key_value, kf);
     }
 
+    g_autofree char* escaped_id = g_uri_escape_string(def->id, NULL, TRUE);
     if (ap) {
         g_autofree char* escaped_ssid = g_uri_escape_string(ap->ssid, NULL, TRUE);
-        conf_path = g_strjoin(NULL, "run/NetworkManager/system-connections/netplan-", def->id, "-", escaped_ssid, ".nmconnection", NULL);
+        conf_path = g_strjoin(NULL, "run/NetworkManager/system-connections/netplan-", escaped_id, "-", escaped_ssid, ".nmconnection", NULL);
 
         g_key_file_set_string(kf, "wifi", "ssid", ap->ssid);
         if (ap->mode < NETPLAN_WIFI_MODE_OTHER)
@@ -904,7 +905,7 @@ write_nm_conf_access_point(const NetplanNetDefinition* def, const char* rootdir,
             g_datalist_foreach((GData**)&ap->backend_settings.nm.passthrough, write_fallback_key_value, kf);
         }
     } else {
-        conf_path = g_strjoin(NULL, "run/NetworkManager/system-connections/netplan-", def->id, ".nmconnection", NULL);
+        conf_path = g_strjoin(NULL, "run/NetworkManager/system-connections/netplan-", escaped_id, ".nmconnection", NULL);
         if (def->has_auth) {
             write_dot1x_auth_parameters(&def->auth, kf);
         }
diff --git a/src/openvswitch.c b/src/openvswitch.c
index 3292dbf..1b420da 100644
--- a/src/openvswitch.c
+++ b/src/openvswitch.c
@@ -34,8 +34,9 @@ static gboolean
 write_ovs_systemd_unit(const char* id, const GString* cmds, const char* rootdir, gboolean physical, gboolean cleanup, const char* dependency, GError** error)
 {
     g_autofree gchar* id_escaped = NULL;
-    g_autofree char* link = g_strjoin(NULL, rootdir ?: "", "/run/systemd/system/systemd-networkd.service.wants/netplan-ovs-", id, ".service", NULL);
-    g_autofree char* path = g_strjoin(NULL, "/run/systemd/system/netplan-ovs-", id, ".service", NULL);
+    g_autofree char* escaped_id_path = g_uri_escape_string(id, NULL, TRUE);
+    g_autofree char* link = g_strjoin(NULL, rootdir ?: "", "/run/systemd/system/systemd-networkd.service.wants/netplan-ovs-", escaped_id_path, ".service", NULL);
+    g_autofree char* path = g_strjoin(NULL, "/run/systemd/system/netplan-ovs-", escaped_id_path, ".service", NULL);
     mode_t orig_umask;
 
     GString* s = g_string_new("[Unit]\n");
@@ -416,7 +417,8 @@ netplan_netdef_write_ovs(const NetplanState* np_state, const NetplanNetDefinitio
         }
 
         /* Try writing out a base config */
-        base_config_path = g_strjoin(NULL, "run/systemd/network/10-netplan-", def->id, NULL);
+        g_autofree char* escaped_id_path = g_uri_escape_string(def->id, NULL, TRUE);
+        base_config_path = g_strjoin(NULL, "run/systemd/network/10-netplan-", escaped_id_path, NULL);
         if (!netplan_netdef_write_network_file(np_state, def, rootdir, base_config_path, has_been_written, error))
             return FALSE;
     } else {
diff --git a/tests/generator/test_common.py b/tests/generator/test_common.py
index 0120199..dae7ecd 100644
--- a/tests/generator/test_common.py
+++ b/tests/generator/test_common.py
@@ -832,6 +832,47 @@ UseMTU=true
 
         self.assert_networkd_udev({'def1.rules': (UDEV_NO_MAC_RULE % ('abc\\"xyz\\n0\\n\\n1', 'eth\\"\\n\\nxyz\\n0'))})
 
+    def test_nd_file_paths_escaped(self):
+        self.generate('''network:
+  version: 2
+  ethernets:
+    "abc/../../xyz0":
+      match:
+        driver: "drv"
+      set-name: "eth123"''')
+
+        self.assert_networkd_udev({'abc%2F..%2F..%2Fxyz0.rules': (UDEV_NO_MAC_RULE % ('drv', 'eth123'))})
+        self.assert_networkd({'abc%2F..%2F..%2Fxyz0.network': '''[Match]\nDriver=drv
+Name=eth123
+
+[Network]
+LinkLocalAddressing=ipv6
+''',
+                              'abc%2F..%2F..%2Fxyz0.link': '''[Match]\nDriver=drv\n
+[Link]
+Name=eth123
+WakeOnLan=off
+'''})
+
+        self.generate('''network:
+  version: 2
+  wifis:
+    "abc/../../xyz0":
+      dhcp4: true
+      access-points:
+        "mywifi":
+          password: "aaaaaaaa"''')
+
+        with open(os.path.join(self.workdir.name, 'run/netplan/wpa-abc%2F..%2F..%2Fxyz0.conf')) as f:
+            self.assertEqual(f.read(), '''ctrl_interface=/run/wpa_supplicant
+
+network={
+  ssid=P"mywifi"
+  key_mgmt=WPA-PSK
+  psk="aaaaaaaa"
+}
+''')
+
 
 class TestNetworkManager(TestBase):
 
