From: Danilo Egea Gondolfo <danilogondolfo@gmail.com>
Date: Thu, 30 May 2024 12:06:08 +0100
Subject: libnetplan: escape control characters

Control characters are escaped in the parser using glib's g_strescape.
Quotes and backslashes were added to the list of exception.

In places where double quotes are not escaped, such as netdef IDs as it
is allowed as interface names, they are escaped as needed when
generating back end configuration.

To support escaping in wpa_supplicant configuration, the syntax for
setting the SSID was changed to 'ssid=P"string here"'. With that,
escaping is support in a printf-style.
---
 src/networkd.c                 | 29 +++++++++++------
 src/nm.c                       | 19 ++++++++++--
 src/parse.c                    | 70 ++++++++++++++++++++++++++++--------------
 src/util-internal.h            |  3 ++
 src/util.c                     | 53 ++++++++++++++++++++++++++++++++
 tests/generator/test_auth.py   | 20 ++++++------
 tests/generator/test_common.py | 26 +++++++++++++++-
 tests/generator/test_wifis.py  | 57 ++++++++++++++++++++++++++++------
 8 files changed, 220 insertions(+), 57 deletions(-)

diff --git a/src/networkd.c b/src/networkd.c
index 1480536..aa329b3 100644
--- a/src/networkd.c
+++ b/src/networkd.c
@@ -876,7 +876,8 @@ write_rules_file(const NetplanNetDefinition* def, const char* rootdir)
     g_string_append(s, "SUBSYSTEM==\"net\", ACTION==\"add\", ");
 
     if (def->match.driver) {
-        g_string_append_printf(s,"DRIVERS==\"%s\", ", def->match.driver);
+        g_autofree char* driver = _netplan_scrub_string(def->match.driver);
+        g_string_append_printf(s,"DRIVERS==\"%s\", ", driver);
     } else {
         g_string_append(s, "DRIVERS==\"?*\", ");
     }
@@ -884,7 +885,8 @@ write_rules_file(const NetplanNetDefinition* def, const char* rootdir)
     if (def->match.mac)
         g_string_append_printf(s, "ATTR{address}==\"%s\", ", def->match.mac);
 
-    g_string_append_printf(s, "NAME=\"%s\"\n", def->set_name);
+    g_autofree char* set_name = _netplan_scrub_string(def->set_name);
+    g_string_append_printf(s, "NAME=\"%s\"\n", set_name);
 
     orig_umask = umask(027);
     g_string_free_to_file(s, rootdir, path, NULL);
@@ -934,10 +936,12 @@ append_wpa_auth_conf(GString* s, const NetplanAuthenticationSettings* auth, cons
     }
 
     if (auth->identity) {
-        g_string_append_printf(s, "  identity=\"%s\"\n", auth->identity);
+        g_autofree char* identity = _netplan_scrub_string(auth->identity);
+        g_string_append_printf(s, "  identity=\"%s\"\n", identity);
     }
     if (auth->anonymous_identity) {
-        g_string_append_printf(s, "  anonymous_identity=\"%s\"\n", auth->anonymous_identity);
+        g_autofree char* anonymous_identity = _netplan_scrub_string(auth->anonymous_identity);
+        g_string_append_printf(s, "  anonymous_identity=\"%s\"\n", anonymous_identity);
     }
     if (auth->password) {
         if (auth->key_management == NETPLAN_AUTH_KEY_MANAGEMENT_WPA_PSK) {
@@ -968,19 +972,23 @@ append_wpa_auth_conf(GString* s, const NetplanAuthenticationSettings* auth, cons
         }
     }
     if (auth->ca_certificate) {
-        g_string_append_printf(s, "  ca_cert=\"%s\"\n", auth->ca_certificate);
+        g_autofree char* ca_certificate = _netplan_scrub_string(auth->ca_certificate);
+        g_string_append_printf(s, "  ca_cert=\"%s\"\n", ca_certificate);
     }
     if (auth->client_certificate) {
-        g_string_append_printf(s, "  client_cert=\"%s\"\n", auth->client_certificate);
+        g_autofree char* client_certificate = _netplan_scrub_string(auth->client_certificate);
+        g_string_append_printf(s, "  client_cert=\"%s\"\n", client_certificate);
     }
     if (auth->client_key) {
-        g_string_append_printf(s, "  private_key=\"%s\"\n", auth->client_key);
+        g_autofree char* client_key = _netplan_scrub_string(auth->client_key);
+        g_string_append_printf(s, "  private_key=\"%s\"\n", client_key);
     }
     if (auth->client_key_password) {
         g_string_append_printf(s, "  private_key_passwd=\"%s\"\n", auth->client_key_password);
     }
     if (auth->phase2_auth) {
-        g_string_append_printf(s, "  phase2=\"auth=%s\"\n", auth->phase2_auth);
+        g_autofree char* phase2_auth = _netplan_scrub_string(auth->phase2_auth);
+        g_string_append_printf(s, "  phase2=\"auth=%s\"\n", phase2_auth);
     }
     return TRUE;
 }
@@ -1032,7 +1040,8 @@ write_wpa_conf(const NetplanNetDefinition* def, const char* rootdir, GError** er
         NetplanWifiAccessPoint* ap;
         g_hash_table_iter_init(&iter, def->access_points);
         while (g_hash_table_iter_next(&iter, NULL, (gpointer) &ap)) {
-            g_string_append_printf(s, "network={\n  ssid=\"%s\"\n", ap->ssid);
+            g_autofree char* ssid = _netplan_scrub_string(ap->ssid);
+            g_string_append_printf(s, "network={\n  ssid=P\"%s\"\n", ssid);
             if (ap->bssid) {
                 g_string_append_printf(s, "  bssid=%s\n", ap->bssid);
             }
@@ -1078,7 +1087,7 @@ write_wpa_conf(const NetplanNetDefinition* def, const char* rootdir, GError** er
 
             /* wifi auth trumps netdef auth */
             if (ap->has_auth) {
-                if (!append_wpa_auth_conf(s, &ap->auth, ap->ssid, error))
+                if (!append_wpa_auth_conf(s, &ap->auth, ssid, error))
                     return FALSE;
             }
             else {
diff --git a/src/nm.c b/src/nm.c
index b00a21c..b612caa 100644
--- a/src/nm.c
+++ b/src/nm.c
@@ -51,9 +51,20 @@ g_string_append_netdef_match(GString* s, const NetplanNetDefinition* def)
         /* MAC could change, e.g. for bond slaves. Ignore by interface-name as well */
         if (def->match.original_name || def->set_name || def->type >= NETPLAN_DEF_TYPE_VIRTUAL) {
             /* we always have the renamed name here */
+            g_autofree char* set_name = NULL;
+            g_autofree char* original_name = NULL;
+            g_autofree char* id = _netplan_scrub_string(def->id);
+
+            if (def->set_name) {
+                set_name = _netplan_scrub_string(def->set_name);
+            }
+
+            if (def->match.original_name) {
+                original_name = _netplan_scrub_string(def->match.original_name);
+            }
             g_string_append_printf(s, "interface-name:%s,",
-                    (def->type >= NETPLAN_DEF_TYPE_VIRTUAL) ? def->id
-                                            : (def->set_name ?: def->match.original_name));
+                    (def->type >= NETPLAN_DEF_TYPE_VIRTUAL) ? id
+                                            : (set_name ?: original_name));
         }
     } else {
         /* no matches â†’ match all devices of that type */
@@ -968,7 +979,9 @@ nd_append_non_nm_ids(gpointer data, gpointer str)
             /* NM cannot match on drivers, so ignore these via udev rules */
             if (!udev_rules)
                 udev_rules = g_string_new(NULL);
-            g_string_append_printf(udev_rules, "ACTION==\"add|change\", SUBSYSTEM==\"net\", ENV{ID_NET_DRIVER}==\"%s\", ENV{NM_UNMANAGED}=\"1\"\n", nd->match.driver);
+
+            g_autofree char* driver = _netplan_scrub_string(nd->match.driver);
+            g_string_append_printf(udev_rules, "ACTION==\"add|change\", SUBSYSTEM==\"net\", ENV{ID_NET_DRIVER}==\"%s\", ENV{NM_UNMANAGED}=\"1\"\n", driver);
         } else {
             g_string_append_netdef_match((GString*) str, nd);
         }
diff --git a/src/parse.c b/src/parse.c
index 1a481ff..352a27f 100644
--- a/src/parse.c
+++ b/src/parse.c
@@ -53,6 +53,15 @@
     dst = g_strdup(src); \
 } }
 
+/*
+ * We use g_strescape to escape control characters from the input.
+ * Besides control characters, g_strescape will also escape double quotes and backslashes.
+ * Quotes are escaped at configuration generation time as needed, as they might be part of passwords for example.
+ * Escaping backslashes in the parser affects "netplan set" as it will always escape \'s from
+ * the input and update YAMLs with all the \'s escaped again.
+*/
+static char* STRESCAPE_EXCEPTIONS = "\"\\";
+
 extern NetplanState global_state;
 
 NetplanParser global_parser = {0};
@@ -308,7 +317,7 @@ handle_generic_str(NetplanParser* npp, yaml_node_t* node, void* entryptr, const
     guint offset = GPOINTER_TO_UINT(data);
     char** dest = (char**) ((void*) entryptr + offset);
     g_free(*dest);
-    *dest = g_strdup(scalar(node));
+    *dest = g_strescape(scalar(node), STRESCAPE_EXCEPTIONS);
     mark_data_as_dirty(npp, dest);
     return TRUE;
 }
@@ -423,8 +432,11 @@ handle_generic_map(NetplanParser *npp, yaml_node_t* node, void* entryptr, const
         assert_type(npp, key, YAML_SCALAR_NODE);
         assert_type(npp, value, YAML_SCALAR_NODE);
 
+        g_autofree char* escaped_key = g_strescape(scalar(key), STRESCAPE_EXCEPTIONS);
+        g_autofree char* escaped_value = g_strescape(scalar(value), STRESCAPE_EXCEPTIONS);
+
         /* TODO: make sure we free all the memory here */
-        if (!g_hash_table_insert(*map, g_strdup(scalar(key)), g_strdup(scalar(value))))
+        if (!g_hash_table_insert(*map, g_strdup(escaped_key), g_strdup(escaped_value)))
             return yaml_error(npp, node, error, "duplicate map entry '%s'", scalar(key));
     }
     mark_data_as_dirty(npp, map);
@@ -454,7 +466,10 @@ handle_generic_datalist(NetplanParser *npp, yaml_node_t* node, void* entryptr, c
         assert_type(npp, key, YAML_SCALAR_NODE);
         assert_type(npp, value, YAML_SCALAR_NODE);
 
-        g_datalist_set_data_full(list, g_strdup(scalar(key)), g_strdup(scalar(value)), g_free);
+        g_autofree char* escaped_key = g_strescape(scalar(key), STRESCAPE_EXCEPTIONS);
+        g_autofree char* escaped_value = g_strescape(scalar(value), STRESCAPE_EXCEPTIONS);
+
+        g_datalist_set_data_full(list, g_strdup(escaped_key), g_strdup(escaped_value), g_free);
     }
     mark_data_as_dirty(npp, list);
 
@@ -691,13 +706,14 @@ handle_match_driver(NetplanParser* npp, yaml_node_t* node, const void* _, GError
         for (yaml_node_item_t *iter = node->data.sequence.items.start; iter < node->data.sequence.items.top; iter++) {
             elem = yaml_document_get_node(&npp->doc, *iter);
             assert_type(npp, elem, YAML_SCALAR_NODE);
-            if (g_strrstr(scalar(elem), " "))
+            g_autofree char* escaped_elem = g_strescape(scalar(elem), STRESCAPE_EXCEPTIONS);
+            if (g_strrstr(escaped_elem, " "))
                 return yaml_error(npp, node, error, "A 'driver' glob cannot contain whitespace");
 
             if (!sequence)
-                sequence = g_string_new(scalar(elem));
+                sequence = g_string_new(escaped_elem);
             else
-                g_string_append_printf(sequence, "\t%s", scalar(elem)); /* tab separated */
+                g_string_append_printf(sequence, "\t%s", escaped_elem); /* tab separated */
         }
 
         if (!sequence)
@@ -730,7 +746,7 @@ handle_auth_str(NetplanParser* npp, yaml_node_t* node, const void* data, GError*
     guint offset = GPOINTER_TO_UINT(data);
     char** dest = (char**) ((void*) npp->current.auth + offset);
     g_free(*dest);
-    *dest = g_strdup(scalar(node));
+    *dest = g_strescape(scalar(node), STRESCAPE_EXCEPTIONS);
     mark_data_as_dirty(npp, dest);
     return TRUE;
 }
@@ -838,7 +854,7 @@ handle_access_point_password(NetplanParser* npp, yaml_node_t* node, const void*
     access_point->has_auth = TRUE;
     access_point->auth.key_management = NETPLAN_AUTH_KEY_MANAGEMENT_WPA_PSK;
     g_free(access_point->auth.password);
-    access_point->auth.password = g_strdup(scalar(node));
+    access_point->auth.password = g_strescape(scalar(node), STRESCAPE_EXCEPTIONS);
     return TRUE;
 }
 
@@ -1200,9 +1216,11 @@ handle_wifi_access_points(NetplanParser* npp, yaml_node_t* node, const void* dat
         value = yaml_document_get_node(&npp->doc, entry->value);
         assert_type(npp, value, YAML_MAPPING_NODE);
 
+        g_autofree char* escaped_key = g_strescape(scalar(key), STRESCAPE_EXCEPTIONS);
+
         g_assert(access_point == NULL);
         access_point = g_new0(NetplanWifiAccessPoint, 1);
-        access_point->ssid = g_strdup(scalar(key));
+        access_point->ssid = g_strdup(escaped_key);
         g_debug("%s: adding wifi AP '%s'", npp->current.netdef->id, access_point->ssid);
 
         /* Check if there's already an SSID with that name */
@@ -1332,9 +1350,10 @@ handle_nameservers_search(NetplanParser* npp, yaml_node_t* node, const void* _,
     for (yaml_node_item_t *i = node->data.sequence.items.start; i < node->data.sequence.items.top; i++) {
         yaml_node_t *entry = yaml_document_get_node(&npp->doc, *i);
         assert_type(npp, entry, YAML_SCALAR_NODE);
+        g_autofree char* escaped_entry = g_strescape(scalar(entry), STRESCAPE_EXCEPTIONS);
         if (!npp->current.netdef->search_domains)
             npp->current.netdef->search_domains = g_array_new(FALSE, FALSE, sizeof(char*));
-        char* s = g_strdup(scalar(entry));
+        char* s = g_strdup(escaped_entry);
         g_array_append_val(npp->current.netdef->search_domains, s);
     }
     mark_data_as_dirty(npp, &npp->current.netdef->search_domains);
@@ -2261,19 +2280,19 @@ handle_ovs_bridge_controller_addresses(NetplanParser* npp, yaml_node_t* node, co
 
         /* Format: [p]unix:file */
         if (is_unix && vec[1] != NULL && vec[2] == NULL) {
-            char* s = g_strdup(scalar(entry));
+            char* s = g_strescape(scalar(entry), STRESCAPE_EXCEPTIONS);
             g_array_append_val(npp->current.netdef->ovs_settings.controller.addresses, s);
             g_strfreev(vec);
             continue;
         /* Format tcp:host[:port] or ssl:host[:port] */
         } else if (is_host && validate_ovs_target(TRUE, vec[1])) {
-            char* s = g_strdup(scalar(entry));
+            char* s = g_strescape(scalar(entry), STRESCAPE_EXCEPTIONS);
             g_array_append_val(npp->current.netdef->ovs_settings.controller.addresses, s);
             g_strfreev(vec);
             continue;
         /* Format ptcp:[port][:host] or pssl:[port][:host] */
         } else if (is_port && validate_ovs_target(FALSE, vec[1])) {
-            char* s = g_strdup(scalar(entry));
+            char* s = g_strescape(scalar(entry), STRESCAPE_EXCEPTIONS);
             g_array_append_val(npp->current.netdef->ovs_settings.controller.addresses, s);
             g_strfreev(vec);
             continue;
@@ -2530,6 +2549,8 @@ handle_network_ovs_settings_global_ports(NetplanParser* npp, yaml_node_t* node,
     NetplanNetDefinition *component = NULL;
 
     for (yaml_node_item_t *iter = node->data.sequence.items.start; iter < node->data.sequence.items.top; iter++) {
+        g_autofree char* escaped_port = NULL;
+        g_autofree char* escaped_peer = NULL;
         pair = yaml_document_get_node(&npp->doc, *iter);
         assert_type(npp, pair, YAML_SEQUENCE_NODE);
 
@@ -2544,32 +2565,35 @@ handle_network_ovs_settings_global_ports(NetplanParser* npp, yaml_node_t* node,
         peer = yaml_document_get_node(&npp->doc, *(item+1));
         assert_type(npp, peer, YAML_SCALAR_NODE);
 
+        escaped_port = g_strescape(scalar(port), STRESCAPE_EXCEPTIONS);
+        escaped_peer = g_strescape(scalar(peer), STRESCAPE_EXCEPTIONS);
+
         /* Create port 1 netdef */
-        component = npp->parsed_defs ? g_hash_table_lookup(npp->parsed_defs, scalar(port)) : NULL;
+        component = npp->parsed_defs ? g_hash_table_lookup(npp->parsed_defs, escaped_port) : NULL;
         if (!component) {
-            component = netplan_netdef_new(npp, scalar(port), NETPLAN_DEF_TYPE_PORT, NETPLAN_BACKEND_OVS);
-            if (g_hash_table_remove(npp->missing_id, scalar(port)))
+            component = netplan_netdef_new(npp, escaped_port, NETPLAN_DEF_TYPE_PORT, NETPLAN_BACKEND_OVS);
+            if (g_hash_table_remove(npp->missing_id, escaped_port))
                 npp->missing_ids_found++;
         }
 
-        if (component->peer && g_strcmp0(component->peer, scalar(peer)))
+        if (component->peer && g_strcmp0(component->peer, escaped_peer))
             return yaml_error(npp, port, error, "openvswitch port '%s' is already assigned to peer '%s'",
                               component->id, component->peer);
-        component->peer = g_strdup(scalar(peer));
+        component->peer = g_strdup(escaped_peer);
 
         /* Create port 2 (peer) netdef */
         component = NULL;
-        component = npp->parsed_defs ? g_hash_table_lookup(npp->parsed_defs, scalar(peer)) : NULL;
+        component = npp->parsed_defs ? g_hash_table_lookup(npp->parsed_defs, escaped_peer) : NULL;
         if (!component) {
-            component = netplan_netdef_new(npp, scalar(peer), NETPLAN_DEF_TYPE_PORT, NETPLAN_BACKEND_OVS);
-            if (g_hash_table_remove(npp->missing_id, scalar(peer)))
+            component = netplan_netdef_new(npp, escaped_peer, NETPLAN_DEF_TYPE_PORT, NETPLAN_BACKEND_OVS);
+            if (g_hash_table_remove(npp->missing_id, escaped_peer))
                 npp->missing_ids_found++;
         }
 
-        if (component->peer && g_strcmp0(component->peer, scalar(port)))
+        if (component->peer && g_strcmp0(component->peer, escaped_port))
             return yaml_error(npp, peer, error, "openvswitch port '%s' is already assigned to peer '%s'",
                               component->id, component->peer);
-        component->peer = g_strdup(scalar(port));
+        component->peer = g_strdup(escaped_port);
     }
     return TRUE;
 }
diff --git a/src/util-internal.h b/src/util-internal.h
index 3b83ece..e9f70de 100644
--- a/src/util-internal.h
+++ b/src/util-internal.h
@@ -91,3 +91,6 @@ has_openvswitch(const NetplanOVSSettings* ovs, NetplanBackend backend, GHashTabl
 
 gboolean
 _netplan_set_file_owners(const char* rootdir, const char* path, const char* suffix, const char* owner, const char* group);
+
+gchar*
+_netplan_scrub_string(const char* content);
diff --git a/src/util.c b/src/util.c
index 74d4791..e5176f2 100644
--- a/src/util.c
+++ b/src/util.c
@@ -639,3 +639,56 @@ _netplan_set_file_owners(const char* rootdir, const char* path, const char* suff
 
     return TRUE;
 }
+
+/* g_string_replace borrowed from glib:
+ * https://gitlab.gnome.org/GNOME/glib/-/blob/main/glib/gstring.c
+ * It's only available in glib 2.68 and newer
+ */
+static guint
+_g_string_replace(GString *string, const gchar *find, const gchar *replace, guint limit)
+{
+    gsize f_len, r_len, pos;
+    gchar *cur, *next;
+    guint n = 0;
+
+    g_return_val_if_fail (string != NULL, 0);
+    g_return_val_if_fail (find != NULL, 0);
+    g_return_val_if_fail (replace != NULL, 0);
+
+    f_len = strlen (find);
+    r_len = strlen (replace);
+    cur = string->str;
+
+    while ((next = strstr (cur, find)) != NULL)
+    {
+        pos = next - string->str;
+        g_string_erase (string, pos, f_len);
+        g_string_insert (string, pos, replace);
+        cur = string->str + pos + r_len;
+        n++;
+        /* Only match the empty string once at any given position, to
+       * avoid infinite loops */
+        if (f_len == 0)
+        {
+            if (cur[0] == '\0')
+                break;
+            else
+                cur++;
+        }
+        if (n == limit)
+            break;
+    }
+
+    return n;
+}
+
+gchar*
+_netplan_scrub_string(const char* content)
+{
+    GString* s = g_string_new(content);
+
+    // Escape double quotes
+    _g_string_replace(s, "\"", "\\\"", 0);
+
+    return g_string_free(s, FALSE);
+}
diff --git a/tests/generator/test_auth.py b/tests/generator/test_auth.py
index 9bbc0b1..84c386e 100644
--- a/tests/generator/test_auth.py
+++ b/tests/generator/test_auth.py
@@ -94,35 +94,35 @@ unmanaged-devices+=interface-name:wl0,''')
             self.assertIn('ctrl_interface=/run/wpa_supplicant', new_config)
             self.assertIn('''
 network={
-  ssid="peer2peer"
+  ssid=P"peer2peer"
   mode=1
   key_mgmt=NONE
 }
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="Luke's Home"
+  ssid=P"Luke's Home"
   key_mgmt=WPA-PSK
   psk="4lsos3kr1t"
 }
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="BobsHome"
+  ssid=P"BobsHome"
   key_mgmt=WPA-PSK
   psk=e03ce667c87bc81ca968d9120ca37f89eb09aec3c55b80386e5d772efd6b926e
 }
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="BillsHome"
+  ssid=P"BillsHome"
   key_mgmt=WPA-PSK
   psk=db3b0acf5653aeaddd5fe034fb9f07175b2864f847b005aaa2f09182d9411b04
 }
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="workplace2"
+  ssid=P"workplace2"
   key_mgmt=WPA-EAP
   eap=PEAP
   identity="joe@internal.example.com"
@@ -132,7 +132,7 @@ network={
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="workplace"
+  ssid=P"workplace"
   key_mgmt=WPA-EAP
   eap=TTLS
   identity="joe@internal.example.com"
@@ -142,7 +142,7 @@ network={
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="workplacehashed"
+  ssid=P"workplacehashed"
   key_mgmt=WPA-EAP
   eap=TTLS
   identity="joe@internal.example.com"
@@ -152,7 +152,7 @@ network={
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="customernet"
+  ssid=P"customernet"
   key_mgmt=WPA-EAP
   eap=TLS
   identity="cert-joe@cust.example.com"
@@ -165,13 +165,13 @@ network={
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="opennet"
+  ssid=P"opennet"
   key_mgmt=NONE
 }
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="Joe's Home"
+  ssid=P"Joe's Home"
   key_mgmt=WPA-PSK
   psk="s0s3kr1t"
 }
diff --git a/tests/generator/test_common.py b/tests/generator/test_common.py
index d623666..0120199 100644
--- a/tests/generator/test_common.py
+++ b/tests/generator/test_common.py
@@ -19,7 +19,7 @@
 import os
 import textwrap
 
-from .base import TestBase, ND_DHCP4, ND_DHCP6, ND_DHCPYES, ND_EMPTY
+from .base import UDEV_NO_MAC_RULE, TestBase, ND_DHCP4, ND_DHCP6, ND_DHCPYES, ND_EMPTY
 
 
 class TestNetworkd(TestBase):
@@ -821,6 +821,17 @@ RouteMetric=100
 UseMTU=true
 '''})
 
+    def test_nd_udev_rules_escaped(self):
+        self.generate('''network:
+  version: 2
+  ethernets:
+    def1:
+      match:
+        driver: "abc\\"xyz\\n0\\n\\n1"
+      set-name: "eth\\"\\n\\nxyz\\n0"''', skip_generated_yaml_validation=True)
+
+        self.assert_networkd_udev({'def1.rules': (UDEV_NO_MAC_RULE % ('abc\\"xyz\\n0\\n\\n1', 'eth\\"\\n\\nxyz\\n0'))})
+
 
 class TestNetworkManager(TestBase):
 
@@ -1326,6 +1337,19 @@ dns=8.8.8.8;
 method=ignore
 '''})
 
+    def test_non_nm_id_udev_rules_escaped(self):
+        self.generate('''network:
+  version: 2
+  renderer: networkd
+  ethernets:
+    eth0:
+      match:
+        driver: "rtl\\n123\\"0"
+      dhcp4: true
+''', skip_generated_yaml_validation=True)
+        expected = 'ACTION=="add|change", SUBSYSTEM=="net", ENV{ID_NET_DRIVER}=="rtl\\n123\\\"0", ENV{NM_UNMANAGED}="1"\n'
+        self.assert_nm_udev(expected)
+
 
 class TestForwardDeclaration(TestBase):
 
diff --git a/tests/generator/test_wifis.py b/tests/generator/test_wifis.py
index 0130a6e..af064d0 100644
--- a/tests/generator/test_wifis.py
+++ b/tests/generator/test_wifis.py
@@ -66,7 +66,7 @@ unmanaged-devices+=interface-name:wl0,''')
         with open(os.path.join(self.workdir.name, 'run/netplan/wpa-wl0.conf')) as f:
             new_config = f.read()
 
-            network = 'ssid="{}"\n  freq_list='.format('band-no-channel2')
+            network = 'ssid=P"{}"\n  freq_list='.format('band-no-channel2')
             freqs_5GHz = [5610, 5310, 5620, 5320, 5630, 5640, 5340, 5035, 5040, 5045, 5055, 5060, 5660, 5680, 5670, 5080, 5690,
                           5700, 5710, 5720, 5825, 5745, 5755, 5805, 5765, 5160, 5775, 5170, 5480, 5180, 5795, 5190, 5500, 5200,
                           5510, 5210, 5520, 5220, 5530, 5230, 5540, 5240, 5550, 5250, 5560, 5260, 5570, 5270, 5580, 5280, 5590,
@@ -77,7 +77,7 @@ unmanaged-devices+=interface-name:wl0,''')
             for freq in freqs_5GHz:
                 self.assertRegexpMatches(new_config, '{}[ 0-9]*{}[ 0-9]*\n'.format(network, freq))
 
-            network = 'ssid="{}"\n  freq_list='.format('band-no-channel')
+            network = 'ssid=P"{}"\n  freq_list='.format('band-no-channel')
             freqs_24GHz = [2412, 2417, 2422, 2427, 2432, 2442, 2447, 2437, 2452, 2457, 2462, 2467, 2472, 2484]
             freqs = new_config.split(network)
             freqs = freqs[1].split('\n')[0]
@@ -87,20 +87,20 @@ unmanaged-devices+=interface-name:wl0,''')
 
             self.assertIn('''
 network={
-  ssid="channel-no-band"
+  ssid=P"channel-no-band"
   key_mgmt=NONE
 }
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="peer2peer"
+  ssid=P"peer2peer"
   mode=1
   key_mgmt=NONE
 }
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="hidden-y"
+  ssid=P"hidden-y"
   scan_ssid=1
   key_mgmt=WPA-PSK
   psk="0bscur1ty"
@@ -108,14 +108,14 @@ network={
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="hidden-n"
+  ssid=P"hidden-n"
   key_mgmt=WPA-PSK
   psk="5ecur1ty"
 }
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="workplace"
+  ssid=P"workplace"
   bssid=de:ad:be:ef:ca:fe
   freq_list=5500
   key_mgmt=WPA-PSK
@@ -124,7 +124,7 @@ network={
 ''', new_config)
             self.assertIn('''
 network={
-  ssid="Joe's Home"
+  ssid=P"Joe's Home"
   bssid=00:11:22:33:44:55
   freq_list=2462
   key_mgmt=WPA-PSK
@@ -303,7 +303,7 @@ unmanaged-devices+=interface-name:wl0,''')
             self.assertIn('''
 wowlan_triggers=any disconnect magic_pkt gtk_rekey_failure eap_identity_req four_way_handshake rfkill_release
 network={
-  ssid="homenet"
+  ssid=P"homenet"
   key_mgmt=NONE
 }
 ''', new_config)
@@ -338,7 +338,7 @@ unmanaged-devices+=interface-name:wl0,''')
             new_config = f.read()
             self.assertIn('''
 network={
-  ssid="homenet"
+  ssid=P"homenet"
   key_mgmt=NONE
 }
 ''', new_config)
@@ -348,6 +348,43 @@ network={
         self.assertTrue(os.path.islink(os.path.join(
             self.workdir.name, 'run/systemd/system/systemd-networkd.service.wants/netplan-wpa-wl0.service')))
 
+    def test_escaping_special_characters(self):
+        self.generate('''network:
+  version: 2
+  wifis:
+    wl0:
+      access-points:
+        "abc\\n\\n123\\"xyz":
+          password:  "abc\\n\\n\\n\\"123"
+          auth:
+            key-management: eap
+            anonymous-identity: "abc\\n\\n321\\n\\"123"
+            identity: "abc\\n\\n321\\n\\"123"
+            password: "abc\\n\\n\\n\\"123"
+            ca-certificate: "abc\\n\\n321\\n\\"123"
+            client-certificate: "abc\\n\\n321\\n\\"123"
+            client-key: "abc\\n\\n321\\n\\"123"
+            client-key-password: "abc\\n\\n321\\n\\"123"
+            phase2-auth: "abc\\n\\n321\\n\\"123"
+            ''', skip_generated_yaml_validation=True)
+
+        with open(os.path.join(self.workdir.name, 'run/netplan/wpa-wl0.conf')) as f:
+            self.assertEqual(f.read(), '''ctrl_interface=/run/wpa_supplicant
+
+network={
+  ssid=P"abc\\n\\n123\\\"xyz"
+  key_mgmt=WPA-EAP
+  identity="abc\\n\\n321\\n\\\"123"
+  anonymous_identity="abc\\n\\n321\\n\\\"123"
+  password="abc\\n\\n\\n\"123"
+  ca_cert="abc\\n\\n321\\n\\\"123"
+  client_cert="abc\\n\\n321\\n\\\"123"
+  private_key="abc\\n\\n321\\n\\\"123"
+  private_key_passwd="abc\\n\\n321\\n\"123"
+  phase2="auth=abc\\n\\n321\\n\\\"123"
+}
+''')
+
 
 class TestNetworkManager(TestBase):
 
